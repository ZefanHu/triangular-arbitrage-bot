#!/usr/bin/env python3
"""
‰∫§ÊòìÊó•ÂøóÁ≥ªÁªüÊµãËØïËÑöÊú¨

ÊµãËØïTradeLoggerÂíåTradingControllerÁöÑÈõÜÊàêÂäüËÉΩ
"""

import sys
import os
import time
import asyncio
from datetime import datetime

# Ê∑ªÂä†È°πÁõÆÊ†πÁõÆÂΩïÂà∞PythonË∑ØÂæÑ
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.trade_logger import TradeLogger
from core.trading_controller import TradingController
from config.config_manager import ConfigManager


def test_trade_logger_basic():
    """ÊµãËØïTradeLoggerÂü∫Êú¨ÂäüËÉΩ"""
    print("üß™ ÊµãËØïTradeLoggerÂü∫Êú¨ÂäüËÉΩ...")
    
    # ÂàõÂª∫Êó•ÂøóËÆ∞ÂΩïÂô®
    logger = TradeLogger(log_dir="logs/test", enable_file_logging=True)
    
    # ÊµãËØïÂ•óÂà©Êú∫‰ºöËÆ∞ÂΩï
    test_opportunity = {
        'path_name': 'USDT->USDC->BTC->USDT',
        'profit_rate': 0.0025,
        'min_trade_amount': 100.0,
        'max_trade_amount': 5000.0,
        'timestamp': time.time()
    }
    
    logger.log_opportunity_found(test_opportunity)
    
    # ÊµãËØï‰∫§ÊòìÁªìÊûúËÆ∞ÂΩï
    test_result = {
        'success': True,
        'investment_amount': 1000.0,
        'final_amount': 1002.5,
        'actual_profit': 2.5,
        'actual_profit_rate': 0.0025,
        'trades': []
    }
    
    logger.log_trade_executed(test_opportunity, test_result)
    
    # ÊµãËØï‰ΩôÈ¢ùËÆ∞ÂΩï
    test_balance = {
        'USDT': 8000.0,
        'USDC': 2000.0,
        'BTC': 0.1
    }
    
    logger.log_balance_update(test_balance)
    
    # ÊµãËØïÊÄßËÉΩÊåáÊ†áÊõ¥Êñ∞
    logger.update_performance_metrics(execution_time=0.5, api_calls=3, api_errors=0)
    
    print("‚úÖ TradeLoggerÂü∫Êú¨ÂäüËÉΩÊµãËØïÂÆåÊàê")
    return logger


def test_trading_controller_integration():
    """ÊµãËØïTradingControllerÈõÜÊàêÂäüËÉΩ"""
    print("üß™ ÊµãËØïTradingControllerÈõÜÊàêÂäüËÉΩ...")
    
    try:
        # ÂàõÂª∫ÈÖçÁΩÆÁÆ°ÁêÜÂô®
        config_manager = ConfigManager()
        
        # ÂàõÂª∫‰∫§ÊòìÊéßÂà∂Âô®ÔºàÂêØÁî®RichÊó•ÂøóÔºâ
        controller = TradingController(
            config_manager=config_manager,
            enable_rich_logging=True
        )
        
        # ÊµãËØïÁªüËÆ°ÂäüËÉΩ
        stats = controller.get_stats()
        print(f"üìä Âü∫Á°ÄÁªüËÆ°: {stats}")
        
        # ÊµãËØïÊÄßËÉΩÊåáÊ†á
        performance_metrics = controller.get_performance_metrics()
        print(f"‚ö° ÊÄßËÉΩÊåáÊ†á: {performance_metrics}")
        
        # ÊµãËØïÂ¢ûÂº∫ÁªüËÆ°
        enhanced_stats = controller.get_enhanced_stats()
        print(f"üìà Â¢ûÂº∫ÁªüËÆ°: ÂåÖÂê´ {len(enhanced_stats)} ‰∏™ÊåáÊ†á")
        
        # ÊµãËØïÊó•ÂøóÂäüËÉΩ
        if controller.trade_logger:
            print("‚úÖ TradeLoggerÂ∑≤ÂêØÁî®")
            controller.print_daily_report()
        else:
            print("‚ùå TradeLoggerÊú™ÂêØÁî®")
        
        print("‚úÖ TradingControllerÈõÜÊàêÂäüËÉΩÊµãËØïÂÆåÊàê")
        return controller
        
    except Exception as e:
        print(f"‚ùå TradingControllerÈõÜÊàêÊµãËØïÂ§±Ë¥•: {e}")
        return None


def test_rich_formatting():
    """ÊµãËØïRichÊ†ºÂºèÂåñÂäüËÉΩ"""
    print("üß™ ÊµãËØïRichÊ†ºÂºèÂåñÂäüËÉΩ...")
    
    logger = TradeLogger(enable_file_logging=False)
    
    # ÁîüÊàê‰∏Ä‰∫õÊµãËØïÊï∞ÊçÆ
    test_opportunities = [
        {
            'path_name': 'USDT->USDC->BTC->USDT',
            'profit_rate': 0.0025,
            'min_trade_amount': 100.0,
            'max_trade_amount': 5000.0,
            'timestamp': time.time()
        },
        {
            'path_name': 'USDT->BTC->USDC->USDT',
            'profit_rate': 0.0018,
            'min_trade_amount': 100.0,
            'max_trade_amount': 3000.0,
            'timestamp': time.time() - 30
        }
    ]
    
    test_results = [
        {
            'success': True,
            'investment_amount': 1000.0,
            'final_amount': 1002.5,
            'actual_profit': 2.5,
            'actual_profit_rate': 0.0025,
            'trades': []
        },
        {
            'success': False,
            'investment_amount': 800.0,
            'final_amount': 0.0,
            'actual_profit': 0.0,
            'actual_profit_rate': 0.0,
            'error': '‰ΩôÈ¢ù‰∏çË∂≥',
            'trades': []
        }
    ]
    
    test_balances = [
        {'USDT': 8000.0, 'USDC': 2000.0, 'BTC': 0.1},
        {'USDT': 8002.5, 'USDC': 2000.0, 'BTC': 0.1}
    ]
    
    # ËÆ∞ÂΩïÊµãËØïÊï∞ÊçÆ
    for i, opp in enumerate(test_opportunities):
        logger.log_opportunity_found(opp)
        
        if i < len(test_results):
            logger.log_trade_executed(opp, test_results[i])
        
        if i < len(test_balances):
            logger.log_balance_update(test_balances[i])
        
        # Ê∑ªÂä†‰∏Ä‰∫õÂª∂Ëøü‰ª•Ê®°ÊãüÁúüÂÆûÊÉÖÂÜµ
        time.sleep(0.1)
    
    # Êõ¥Êñ∞ÊÄßËÉΩÊåáÊ†á
    logger.update_performance_metrics(execution_time=0.5, api_calls=5, api_errors=1)
    
    print("‚úÖ RichÊ†ºÂºèÂåñÂäüËÉΩÊµãËØïÂÆåÊàê")
    return logger


def test_report_generation():
    """ÊµãËØïÊä•ÂëäÁîüÊàêÂäüËÉΩ"""
    print("üß™ ÊµãËØïÊä•ÂëäÁîüÊàêÂäüËÉΩ...")
    
    logger = test_rich_formatting()
    
    # ÁîüÊàêÂπ∂ÊòæÁ§∫Êó•Êä•
    print("\nüìÖ ÁîüÊàêÊØèÊó•Êä•Âëä:")
    logger.print_daily_report()
    
    # ÂØºÂá∫Êä•Âëä
    report_file = logger.export_daily_report()
    print(f"üìÑ Êä•ÂëäÂ∑≤ÂØºÂá∫Âà∞: {report_file}")
    
    # ÊòæÁ§∫‰ΩôÈ¢ùÂéÜÂè≤
    print("\nüí∞ ‰ΩôÈ¢ùÂéÜÂè≤:")
    logger.print_balance_history()
    
    # Ëé∑ÂèñÁªüËÆ°ÊëòË¶Å
    summary = logger.get_statistics_summary()
    print(f"\nüìä ÁªüËÆ°ÊëòË¶Å: {summary}")
    
    print("‚úÖ Êä•ÂëäÁîüÊàêÂäüËÉΩÊµãËØïÂÆåÊàê")


def test_real_time_display():
    """ÊµãËØïÂÆûÊó∂ÊòæÁ§∫ÂäüËÉΩ"""
    print("üß™ ÊµãËØïÂÆûÊó∂ÊòæÁ§∫ÂäüËÉΩ...")
    
    logger = test_rich_formatting()
    
    # ÂàõÂª∫ÂÆûÊó∂ÁõëÊéßÂ∏ÉÂ±Ä
    layout = logger.print_real_time_monitor()
    
    print("‚úÖ ÂÆûÊó∂ÊòæÁ§∫ÂäüËÉΩÊµãËØïÂÆåÊàê")
    print("üí° Ë¶ÅÊü•ÁúãÂÆûÊó∂ÁõëÊéßÊïàÊûúÔºåËØ∑ËøêË°å: python examples/real_time_monitor.py")


def run_all_tests():
    """ËøêË°åÊâÄÊúâÊµãËØï"""
    print("üöÄ ÂºÄÂßãÊµãËØï‰∫§ÊòìÊó•ÂøóÁ≥ªÁªü...")
    print("=" * 50)
    
    try:
        # ÊµãËØïÂü∫Êú¨ÂäüËÉΩ
        logger = test_trade_logger_basic()
        print()
        
        # ÊµãËØïÈõÜÊàêÂäüËÉΩ
        controller = test_trading_controller_integration()
        print()
        
        # ÊµãËØïRichÊ†ºÂºèÂåñ
        test_rich_formatting()
        print()
        
        # ÊµãËØïÊä•ÂëäÁîüÊàê
        test_report_generation()
        print()
        
        # ÊµãËØïÂÆûÊó∂ÊòæÁ§∫
        test_real_time_display()
        print()
        
        print("=" * 50)
        print("üéâ ÊâÄÊúâÊµãËØïÂÆåÊàêÔºÅ")
        
        # ÊòæÁ§∫‰ΩøÁî®ËØ¥Êòé
        print("\nüìñ ‰ΩøÁî®ËØ¥Êòé:")
        print("1. ËøêË°åÂÆûÊó∂ÁõëÊéß: python examples/real_time_monitor.py")
        print("2. Êü•ÁúãÊó•ÂøóÊñá‰ª∂: logs/trade_history.json")
        print("3. Êü•ÁúãÊØèÊó•ÁªüËÆ°: logs/daily_stats.json")
        print("4. ÂØºÂá∫ÁöÑÊä•Âëä: logs/daily_report_*.txt")
        
    except Exception as e:
        print(f"‚ùå ÊµãËØïËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    run_all_tests()